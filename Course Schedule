class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {

	List<Integer> [] graph = new ArrayList[numCourses];
	int [] dd = new int[numCourses];
	Queue<Integer> q =new LinkedList<>();

	for(int i=0;i<numCourses;++i) {

		graph[i] = new ArrayList<>();
	}

	for(int arr [] : prerequisites) {

		graph[arr[1]].add(arr[0]);
		dd[arr[0]]++;
	}


	for(int i=0;i<numCourses;++i){

		if(dd[i] == 0) q.offer(i);
	}

	int count = 0;

	while(!q.isEmpty()) {

		int vertex = q.poll();
		count++;

		for(int i : graph[vertex]) {

			if(--dd[i] == 0) q.offer(i);
		}
	}

	return count == numCourses;
}
}
